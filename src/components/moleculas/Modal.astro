---
import Button from '../atomos/Button';
import Button1 from '../atomos/Button1.astro';
import { CircleX } from 'lucide-react';
const { id, iconNode, label, title, isIcon } = Astro.props;
const Icon = iconNode;
---

<div data-id={id}>
  {
    label && (
      <Button className="w-full" variant="primary" id={`modal-open-${id}`}>
        {isIcon && <Icon className="mr-2" />}
        {label}
      </Button>
    )
  }

  <dialog
    id={`dialog-modal-${id}`}
    class="modal print:hidden relative duration-300 open:fixed open:flex flex-col w-full max-w-3xl rounded-lg backdrop:bg-primary-textoTitle/80 open:backdrop:backdrop-blur-sm max-h-[90vh] overflow-hidden"
  >
    {/* Header Fijo */}
    <div
      class="flex justify-between items-center p-4 border-b bg-primary-bg-componentes flex-shrink-0"
    >
      <h3 class="text-xl font-semibold text-gray-800">{title}</h3>
      <button
        id={`modal-close-${id}`}
        class="text-gray-500 hover:text-primary-400 transition-colors rounded-full p-1"
      >
        <CircleX size={24} />
      </button>
    </div>

    {/* Contenido con Scroll */}
    <div class="p-6 overflow-y-auto flex-grow">
      <slot />
    </div>
  </dialog>
</div>

<script define:vars={{ id }}>
  const openBtn = document.getElementById(`modal-open-${id}`);
  const closeBtn = document.getElementById(`modal-close-${id}`);
  const dialog = document.getElementById(`dialog-modal-${id}`);

  openBtn?.addEventListener('click', () => {
    dialog?.showModal();
  });

  closeBtn?.addEventListener('click', () => {
    dialog?.close();
  });

  // Opcional: cerrar al hacer clic en el backdrop
  dialog?.addEventListener('click', event => {
    if (event.target === dialog) {
      dialog.close();
    }
  });
</script>

<style>
  .modal {
    z-index: 1000; /* Ajusta si es necesario */
  }
  /* Elimina el padding por defecto del dialog */
  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
  }
  dialog {
    padding: 0;
  }
</style>
