---
import ContenedorChartjs from '../atomos/ContenedorChartjs.astro';
---

<div class="w-full">
  <div id="charts-container" class="flex h-72 overflow-x-auto items-center gap-4 p-4 scrollbar-thin scrollbar-thumb-rounded-md scrollbar-thumb-gray-400">
    <div id="no-data-message" class="hidden w-full text-center text-gray-500">No hay datos de signos vitales para mostrar.</div>
    <ContenedorChartjs><canvas id="pesoChart"></canvas></ContenedorChartjs>
    <ContenedorChartjs><canvas id="imcChart"></canvas></ContenedorChartjs>
    <ContenedorChartjs><canvas id="temperaturaChart"></canvas></ContenedorChartjs>
    <ContenedorChartjs><canvas id="frecuenciaCardiacaChart"></canvas></ContenedorChartjs>
    <ContenedorChartjs><canvas id="frecuenciaRespiratoriaChart"></canvas></ContenedorChartjs>
  </div>
</div>

<!-- Librerías de Chart.js y el plugin de anotaciones -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.umd.min.js"
></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/3.0.1/chartjs-plugin-annotation.min.js"
></script>

<script define:vars={{ pacienteId: Astro.params.pacienteId }}>
  // --- 1. OBTENCIÓN Y PREPARACIÓN DE DATOS ---
  async function fetchSignosVitales() {
    try {
      const response = await fetch(`/api/pacientes/signosVitales/${pacienteId}`);
      const data = await response.json();
      if (data.status !== 200 || !data.data || data.data.length === 0) {
        console.error('Error o sin datos:', data.msg);
        return { labels: [], datasets: {} };
      }

      const labels = data.data.map(item => new Date(item.created_at).toLocaleDateString('es-AR'));
      const datasets = {
        peso: data.data.map(item => item.peso),
        imc: data.data.map(item => item.imc),
        temperatura: data.data.map(item => item.temperatura),
        frecuenciaCardiaca: data.data.map(item => item.frecuenciaCardiaca),
        frecuenciaRespiratoria: data.data.map(item => item.frecuenciaRespiratoria),
      };
      return { labels, datasets };
    } catch (error) {
      console.error('Error fetching data:', error);
      return { labels: [], datasets: {} };
    }
  }

  // --- 2. FUNCIÓN GENÉRICA PARA CREAR GRÁFICOS ---
  function createLineChart(config) {
    const chartConfig = {
      type: 'line',
      data: {
        labels: config.labels,
        datasets: [
          {
            label: config.dataset.label,
            data: config.dataset.data,
            borderColor: config.color,
            backgroundColor: `${config.color}33`, // Color con opacidad para el área
            borderWidth: 2.5,
            fill: true,
            tension: 0.4, // Líneas suavizadas
            pointBackgroundColor: config.color,
            pointRadius: 4,
            pointHoverRadius: 7,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false }, // La leyenda en el label es suficiente
          title: { display: true, text: config.title, font: { size: 16 } },
          tooltip: {
            backgroundColor: '#2d3748',
            titleFont: { size: 14 },
            bodyFont: { size: 12 },
            padding: 10,
            cornerRadius: 4,
            displayColors: false,
          },
          annotation: {
            annotations: {
              range: {
                type: 'box',
                yMin: config.normalRange.min,
                yMax: config.normalRange.max,
                backgroundColor: 'rgba(40, 167, 69, 0.15)', // Verde sutil
                borderColor: 'rgba(40, 167, 69, 0.3)',
                borderWidth: 1,
                label: {
                  content: 'Rango Normal',
                  display: true,
                  position: 'start',
                  font: { size: 10 },
                  color: 'rgba(40, 167, 69, 0.8)',
                },
              },
            },
          },
        },
        scales: {
          y: {
            title: { display: true, text: config.yAxisLabel },
            grid: { color: 'rgba(200, 200, 200, 0.1)' },
          },
          x: {
            grid: { display: false },
          },
        },
      },
    };
    new Chart(document.getElementById(config.elementId), chartConfig);
  }

  // --- 3. INICIALIZACIÓN DE TODOS LOS GRÁFICOS ---
  async function initCharts() {
    const { labels, datasets } = await fetchSignosVitales();

    if (labels.length === 0) {
      document.getElementById('charts-container').style.display = 'none';
      document.getElementById('no-data-message').style.display = 'block';
      return;
    }

    createLineChart({
      elementId: 'pesoChart',
      labels: labels,
      dataset: { label: 'Peso (kg)', data: datasets.peso },
      title: 'Evolución del Peso',
      yAxisLabel: 'Peso (kg)',
      color: '#3b82f6', // Azul
      normalRange: { min: 50, max: 80 }, // Rango de ejemplo
    });

    createLineChart({
      elementId: 'imcChart',
      labels: labels,
      dataset: { label: 'IMC', data: datasets.imc },
      title: 'Evolución del IMC',
      yAxisLabel: 'IMC (kg/m²)',
      color: '#8b5cf6', // Violeta
      normalRange: { min: 18.5, max: 24.9 },
    });

    createLineChart({
      elementId: 'temperaturaChart',
      labels: labels,
      dataset: { label: 'Temperatura (°C)', data: datasets.temperatura },
      title: 'Evolución de la Temperatura',
      yAxisLabel: 'Temperatura (°C)',
      color: '#ef4444', // Rojo
      normalRange: { min: 36.5, max: 37.5 },
    });

    createLineChart({
      elementId: 'frecuenciaCardiacaChart',
      labels: labels,
      dataset: { label: 'Frec. Cardíaca (lpm)', data: datasets.frecuenciaCardiaca },
      title: 'Evolución Frec. Cardíaca',
      yAxisLabel: 'Latidos por minuto',
      color: '#f97316', // Naranja
      normalRange: { min: 60, max: 100 },
    });

    createLineChart({
      elementId: 'frecuenciaRespiratoriaChart',
      labels: labels,
      dataset: { label: 'Frec. Respiratoria', data: datasets.frecuenciaRespiratoria },
      title: 'Evolución Frec. Respiratoria',
      yAxisLabel: 'Respiraciones por minuto',
      color: '#14b8a6', // Teal
      normalRange: { min: 12, max: 20 },
    });
  }

  // Arrancar todo
  initCharts();
</script>

<style>
  .scrollbar-thin::-webkit-scrollbar {
    height: 8px;
  }
  .scrollbar-thin::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 10px;
  }
  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #aaa;
  }
</style>
