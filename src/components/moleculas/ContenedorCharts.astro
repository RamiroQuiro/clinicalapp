---
const { userId } = Astro.props;
const { pacienteId } = Astro.params;
---

<div
  id="dataId"
  data-userid={userId}
  data-pacienteid={pacienteId}
  class="flex   h-72 overflow-auto items-center justify-center gap-2 "
>
  <div class="w-1/3 h-full flex items-center border rounded-lg p-1 bg-primary-bg-componentes">
    <canvas id="imc" class="w-[30%]"></canvas>
  </div>
  <div class="w-1/3 h-full flex items-center border rounded-lg p-1 bg-primary-bg-componentes">
    <canvas id="temperatura" class="w-[30%]"></canvas>
  </div>
  <div class="w-1/3 h-full flex items-center border rounded-lg p-1 bg-primary-bg-componentes">
    <canvas id="frecuenciaCardiaca" class="w-[30%]"></canvas>
  </div>

</div>

<script
  type="text/javascript"
  src="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.umd.min.js"></script>

<canvas id="temperatura" class="p-2"></canvas>

<script>
  const pacienteId = document.getElementById("dataId")?.dataset.pacienteid;
  async function fetchSignosVitales() {
    try {
      const response = await fetch(
        `/api/pacientes/signosVitales/${pacienteId}`
      );
      const data = await response.json();
      console.log(data);
      if (data.status !== 200) {
        console.error("Error al obtener los datos:", data.msg);
        return null;
      }
      return data.data;
    } catch (error) {
      console.error("Error fetching temperatura data:", error);
      return null;
    }
  }

  async function initTemperaturaChart() {
    const temperaturaData = await fetchSignosVitales();
    if (!temperaturaData) return;

    const labels = temperaturaData.map((item) => item.created_at); // Fechas de las mediciones
    const temperaturas = temperaturaData.map((item) => item.temperatura);
    const dateFormat = new Date(labels).toLocaleDateString();
    const data = {
      labels: labels,
      datasets: [
        {
          label: "Temperatura (°C)",
          data: temperaturas,
          borderColor: "#FF5733",
          backgroundColor: "rgba(255, 87, 51, 0.5)",
          borderWidth: 2,
        },
      ],
    };

    const config = {
      type: "line",
      data: data,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "top",
          },
          title: {
            display: true,
            text: "Evolución de la Temperatura",
          },
        },
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: "Temperatura (°C)",
            },
          },
        },
      },
    };

    const temperaturaChart = new Chart(
      document.getElementById("temperatura"),
      config
    );
  }

  async function initFrecuenciaCardiacaChart() {
    const frecuenciaData = await fetchSignosVitales();
    if (!frecuenciaData) return;

    const labels = frecuenciaData.map((item) => item.created_at); // Fechas de las mediciones
    const frecuencias = frecuenciaData.map((item) => item.frecuenciaCardiaca);

    const data = {
      labels: labels,
      datasets: [
        {
          label: "Frecuencia Cardíaca (lpm)",
          data: frecuencias,
          borderColor: "#2B82E3",
          backgroundColor: "rgba(43, 130, 227, 0.5)",
          borderWidth: 2,
        },
      ],
    };

    const config = {
      type: "line",
      data: data,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "top",
          },
          title: {
            display: true,
            text: "Evolución de la Frecuencia Cardíaca",
          },
        },
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: "Frecuencia Cardíaca (lpm)",
            },
          },
        },
      },
    };

    const frecuenciaCardiacaChart = new Chart(
      document.getElementById("frecuenciaCardiaca"),
      config
    );
  }

  async function initIMCChart() {
    const imcData = await fetchSignosVitales();
    if (!imcData) return;

    const labels = imcData.map((item) => item.created_at); // Fechas de las mediciones
    const imcs = imcData.map((item) => item.imc);

    const data = {
      labels: labels,
      datasets: [
        {
          label: "IMC (kg/m²)",
          data: imcs,
          borderColor: "#28A745",
          backgroundColor: "rgba(40, 167, 69, 0.5)",
          borderWidth: 2,
          pointStyle: "circle",
          pointRadius: 5,
        },
      ],
    };

    const config = {
      type: "line",
      data: data,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "top",
          },
          title: {
            display: true,
            text: "Evolución del IMC",
          },
        },
        scales: {
          y: {
            beginAtZero: false,
            title: {
              display: true,
              text: "IMC (kg/m²)",
            },
            ticks: {
              callback: function (value) {
                if (value < 18.5) return `${value} (Bajo peso)`;
                if (value >= 18.5 && value < 24.9) return `${value} (Normal)`;
                if (value >= 25 && value < 29.9) return `${value} (Sobrepeso)`;
                return `${value} (Obesidad)`;
              },
            },
          },
          x: {
            title: {
              display: true,
              text: "Fecha",
            },
          },
        },
        elements: {
          line: {
            tension: 0.4, // Suaviza las líneas del gráfico
          },
        },
      },
    };

    const imcChart = new Chart(document.getElementById("imc"), config);
  }

  initIMCChart();
  initFrecuenciaCardiacaChart();
  initTemperaturaChart();
</script>
