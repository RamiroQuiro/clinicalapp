---
import ContenedorAtencion from "../../../../../components/moleculas/ContenedorAtencion.astro";
---

<ContenedorAtencion
  labelButton="Guardar"
  labelH3="tratamiento"
  idButton="guardarTratamiento"
>
  <form
    action=""
    class="flex-1 w-full h-full flex items-start justify-center"
    id="formularioTratamiento"
  >
    <textarea
      class="w-full text-sm p-2 text-primary-texto outline-none ring-0"
      rows="10"
      name="motivoConsulta"
      id="campoTratamiento"
      placeholder="Escribe aquí el tratamiento indicado..."
    >
    </textarea>
  </form>
  <span
    id="notificacionTratamiento"
    class="text-xs font-extralight tracking-wider px-2 animate-aparecer"></span>
</ContenedorAtencion>

<script>
  import { atencion } from "../../../../../context/store";
  import { showToast } from "../../../../../utils/toast/toastShow";

  // Objeto para manejar datos del tratamiento y los IDs asociados
  let dataTratamiento = { tratamiento: "", dataIds: {} };

  // Referencia al campo de texto para ingresar el tratamiento
  const textarea = document.getElementById("campoTratamiento");

  // Referencia al botón para guardar manualmente el tratamiento
  const btnEnviar = document.getElementById("guardarTratamiento");

  // ID del timeout para evitar múltiples solicitudes simultáneas
  let timeoutId;

  // Cargar el tratamiento actual desde el store al textarea


  // Actualizar `dataIds` del tratamiento cada vez que cambie el store de `atencion`
  atencion.subscribe((state) => {
   
    dataTratamiento.dataIds = state.dataIds;
    if (textarea) {
    textarea.value = state.tratamiento || ""; // Asegura que el valor esté sincronizado
  }
  });

  // Evento para guardar automáticamente el tratamiento después de un tiempo de inactividad
  textarea?.addEventListener("input", () => {
    // Limpiar cualquier timeout anterior
    clearTimeout(timeoutId);

    // Configurar un timeout de 20 segundos para guardar automáticamente
    timeoutId = setTimeout(async () => {
      const tratamiento = textarea.value.trim(); // Eliminar espacios en blanco al inicio y final
      if (!tratamiento) return; // No enviar si el campo está vacío

      dataTratamiento.tratamiento = tratamiento;
      try {
        // Enviar los datos a la API para guardar el tratamiento
        const response = await fetch("/api/pacientes/atencion/tratamiento", {
          method: "POST",
          body: JSON.stringify(dataTratamiento),
        });
        const result = await response.json();
        console.log(result);

        // Notificar al usuario según el resultado de la solicitud
        if (response.ok) {
          document.getElementById("notificacionTratamiento").textContent =
            "Guardado automáticamente...";
          console.log("Tratamiento guardado automáticamente");
        } else {
          console.error("Error al guardar automáticamente el tratamiento");
        }
      } catch (error) {
        console.error(
          "Error al guardar el tratamiento automáticamente:",
          error
        );
      }
    }, 20000); // Guardar automáticamente después de 20 segundos
  });

  // Evento para guardar manualmente el tratamiento al hacer clic en el botón
  btnEnviar?.addEventListener("click", async (event) => {
    event.preventDefault(); // Evitar el comportamiento predeterminado del formulario

    const tratamiento = textarea.value.trim(); // Obtener el valor del textarea
    if (!tratamiento) {
      // Mostrar notificación si el campo está vacío
      showToast("Ingrese tratamiento", { background: "bg-primary-400" });
      return;
    }

    // Asignar el tratamiento al objeto de datos
    dataTratamiento.tratamiento = tratamiento;

    try {
      // Enviar los datos a la API para guardar manualmente el tratamiento
      const response = await fetch("/api/pacientes/atencion/tratamiento", {
        method: "POST",
        body: JSON.stringify(dataTratamiento),
      });
      const result = await response.json();
      console.log(result);

      // Mostrar notificación según el resultado de la solicitud
      if (result.status === 200) {
        showToast("Tratamiento guardado");
      } else {
        showToast("Error al guardar", { background: "bg-primary-400" });
      }
    } catch (error) {
      console.error("Error al enviar el tratamiento:", error);
    }
  });
</script>
