---
import { desc, eq } from "drizzle-orm";
import MainDashboard from "../../../../../components/atomos/MainDashboard.astro";
import LayoutDash from "../../../../../components/layouts/LayoutDash.astro";
import db from "../../../../../db";
import { antecedente, atenciones, diagnostico, pacientes } from "../../../../../db/schema";
import type { pacienteType } from "../../../../../types";
import { generateId } from "lucia";
import { medicamento } from "../../../../../db/schema/medicamento";
import IndexAtencion from "./IndexAtencion.astro";
const { pacienteId, atencionId } = Astro.params;

const dataIds = {
  estado: "pendienta",
  atencionId,
  userId: "sakflsdk",
  pacienteId: pacienteId,
};
// tengo q implemtar type para historiClinica

const dataFetchPaciente = async (idPaciente, idAtencion) => {
  try {
    const result = await db.transaction(async (trx) => {
      // Buscar paciente
      const pacienteData = (
        await trx.select().from(pacientes).where(eq(pacientes.id, idPaciente))
      ).at(0);
      const antecedentesData= await trx.select().from(antecedente).where(eq(antecedente.pacienteId,idPaciente))
      if (!pacienteData) throw new Error("Paciente no encontrado");

      // Verificar si existe atención
      const atencionData = (
        await trx.select().from(atenciones).where(eq(atenciones.id, idAtencion))
      ).at(0);

      if (atencionData) {
        // Traer medicamentos asociados a la atención
        const medicamentosData = await trx
          .select()
          .from(medicamento)
          .where(eq(medicamento.atencionId, idAtencion))
          .orderBy(desc(medicamento.created_at));

        // Traer diagnósticos asociados a la atención
        const diagnosticoData = await trx
          .select()
          .from(diagnostico)
          .where(eq(diagnostico.atencionId, idAtencion))
          .orderBy(desc(diagnostico.created_at));

        return {
          pacienteData,
          atencionData,
          medicamentosData,
          diagnosticoData,
          antecedentesData
        };
      }

      // Si no hay atención, devolver solo datos del paciente
      return { pacienteData ,antecedentesData};
    });

    return result; // Resultado de la transacción
  } catch (error) {
    console.error("Error en la transacción:", error);
    throw new Error("Ocurrió un error al procesar la solicitud");
  }
};

const {antecedentesData,pacienteData,atencionData,diagnosticoData,medicamentosData}= await dataFetchPaciente(pacienteId,atencionId)



---

<LayoutDash>
  <MainDashboard dataIds={dataIds} h1="Atención">
    <!-- {
      !isExistHC&&
      <div class="w-full flex items-center py-2 text-primary-400 font-semibold text-lg justify-center bg-primary-400/30">
        <p>Atencion Finalziada</p>
      </div>
    } -->
    <IndexAtencion
    antecedentes={antecedentesData}
      dataIds={dataIds}
      ,

      pacienteData={pacienteData}
      ,
      isExistHC={atencionData}
      ,
      isExistDiagnosticos={diagnosticoData}
      ,
      isExistMedicamentos={medicamentosData}
      ,
    />
  </MainDashboard>
</LayoutDash>
