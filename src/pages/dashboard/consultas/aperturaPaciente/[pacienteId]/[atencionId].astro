---
import { desc, eq, sql } from "drizzle-orm";
import MainDashboard from "../../../../../components/atomos/MainDashboard.astro";
import LayoutDash from "../../../../../components/layouts/LayoutDash.astro";
import db from "../../../../../db";
import {
  antecedente,
  atenciones,
  diagnostico,
  pacientes,
  signosVitales,
} from "@/db/schema";
import { medicamento } from "../../../../../db/schema/medicamento";
import IndexAtencion from "./IndexAtencion.astro";
const { pacienteId, atencionId } = Astro.params;

const dataIds = {
  estado: "pendienta",
  atencionId,
  userId: "sakflsdk",
  pacienteId: pacienteId,
};
// tengo q implemtar type para historiClinica

const dataFetchPaciente = async (idPaciente, idAtencion) => {
  try {
    const result = await db.transaction(async (trx) => {
      // Buscar paciente
      const pacienteData = (
        await trx.select().from(pacientes).where(eq(pacientes.id, idPaciente))
      ).at(0);
      // buscar antecedentes del paciente
      const antecedentesData = await trx
        .select()
        .from(antecedente)
        .where(eq(antecedente.pacienteId, idPaciente));
      // buscar signosvitales anteriores
      const fecthSignosVitalesData = await trx
        .select()
        .from(signosVitales)
        .where(eq(signosVitales.pacienteId, pacienteId))
        .orderBy(desc(signosVitales.created_at))
        .limit(4);


      
      // Procesar los datos
      const signosVitalesData = [
        "temperatura",
        "pulso",
        "frecuenciaCardiaca",
        "frecuenciaRespiratoria",
        "tensionArterial",
        "saturacionOxigeno",
        "glucosa",
        "peso",
        "talla",
        "imc",
      ].map((tipo) => {
        const historial = fecthSignosVitalesData.map((sv) => {
          return {valor:parseFloat(sv[tipo]), fecha:sv.created_at}
        })
        return {tipo,historial,};
      });
      // console.log('mapando en el array',signosVitalesData)
      // traer ultiumas visitas

      const historialVisitaData = await trx
        .select()
        .from(atenciones)
        .where(eq(atenciones.pacienteId, pacienteId))
        .orderBy(desc(atenciones.created_at))
        .limit(4);
      if (!pacienteData) throw new Error("Paciente no encontrado");

      // Verificar si existe atención
      const atencionData = (
        await trx.select().from(atenciones).where(eq(atenciones.id, idAtencion))
      ).at(0);

      if (atencionData) {
        // Traer medicamentos asociados a la atención
        const medicamentosData = await trx
          .select()
          .from(medicamento)
          .where(eq(medicamento.atencionId, idAtencion))
          .orderBy(desc(medicamento.created_at));

        // Traer diagnósticos asociados a la atención
        const diagnosticoData = await trx
          .select()
          .from(diagnostico)
          .where(eq(diagnostico.atencionId, idAtencion))
          .orderBy(desc(diagnostico.created_at));

        return {
          pacienteData,
          atencionData,
          medicamentosData,
          diagnosticoData,
          antecedentesData,
          signosVitalesData,
          historialVisitaData
        };
      }

      // Si no hay atención, devolver solo datos del paciente
      return { pacienteData, signosVitalesData, antecedentesData ,historialVisitaData};
    });

    return result; // Resultado de la transacción
  } catch (error) {
    console.error("Error en la transacción:", error);
    throw new Error("Ocurrió un error al procesar la solicitud");
  }
};

const {
  antecedentesData,
  pacienteData,
  atencionData,
  diagnosticoData,
  signosVitalesData,
  medicamentosData,
  historialVisitaData
} = await dataFetchPaciente(pacienteId, atencionId);


---

<LayoutDash>
  <MainDashboard
    dataIds={dataIds}
    h1={`Atención a ${pacienteData.nombre} ${pacienteData.apellido}`}
  >
    <!-- {
      !isExistHC&&
      <div class="w-full flex items-center py-2 text-primary-400 font-semibold text-lg justify-center bg-primary-400/30">
        <p>Atencion Finalziada</p>
      </div>
    } -->
    <IndexAtencion
      antecedentes={antecedentesData}
      dataIds={dataIds}
      signosVitalesData={signosVitalesData}
      pacienteData={pacienteData}
      isExistHC={atencionData}
      isExistDiagnosticos={diagnosticoData}
      isExistMedicamentos={medicamentosData}
      historialVisitaData={historialVisitaData}
    />
  </MainDashboard>
</LayoutDash>
