---
import ButtonBackHistory from '@/components/atomos/ButtonBackHistory.astro';
import MainDashboard from '@/components/atomos/MainDashboard.astro';
import LayoutDash from '@/components/layouts/LayoutDash.astro';
import AtencionExistente from '@/components/organismo/AtencionExistente';
import db from '@/db';
import {
  atenciones,
  diagnostico,
  fichaPaciente,
  medicamento,
  pacientes,
  signosVitales,
} from '@/db/schema';
import { and, eq } from 'drizzle-orm';

const { atencionId } = Astro.params;

const { session } = Astro.locals;
let atencionData: {};
try {
  const result = await db.transaction(async trx => {
    const consultaAtencion = (
      await trx
        .select()
        .from(atenciones)

        .where(eq(atenciones.id, atencionId))
    ).at(0);
    if (!consultaAtencion) {
      console.log('no se encontro atencion');
    }
    // Buscar paciente
    const pacienteData = (
      await trx
        .select({
          nombre: pacientes.nombre,
          apellido: pacientes.apellido,
          dni: pacientes.dni,
          sexo: pacientes.sexo,
          celular: fichaPaciente.celular,
          email: fichaPaciente.email,
          provincia: fichaPaciente.provincia,
          nObraSocial: fichaPaciente.nObraSocial,
          obraSocial: fichaPaciente.obraSocial,
          ciudad: fichaPaciente.ciudad,
          grupoSanguineo: fichaPaciente.grupoSanguineo,
          estatura: fichaPaciente.estatura,
          domicilio: pacientes.domicilio,
        })
        .from(pacientes)
        .innerJoin(
          fichaPaciente,
          and(
            eq(fichaPaciente.pacienteId, pacientes.id),
            eq(fichaPaciente.userId, session?.userId) // Filtrar por el usuario (userId)
          )
        )
        .where(eq(pacientes.id, consultaAtencion.pacienteId))
    ).at(0);

    const medicamentosAtencionData = await trx
      .select()
      .from(medicamento)
      .where(eq(medicamento.atencionId, atencionId));
    const diagnosticoAtencionData = await trx
      .select()
      .from(diagnostico)
      .where(eq(diagnostico.atencionId, atencionId));
    const signosVitalesAtencion = await trx
      .select()
      .from(signosVitales)
      .where(eq(signosVitales.atencionId, atencionId));
    return {
      atencionData,
      pacienteData,
      medicamentosAtencionData,
      diagnosticoAtencionData,
      signosVitalesAtencion,
    };
  });
  atencionData = result;
  console.log('signosVitales', atencionData.signosVitalesAtencion);
} catch (err) {
  console.log(err);
} finally {
  console.log('finalizacion de la peticion');
}
---

<LayoutDash>
  <MainDashboard>
    <div class="flex w-11/12">
      <div class="pr-2 py-3">
        <ButtonBackHistory />
      </div>
      <AtencionExistente atencionData={atencionData} client:load />
    </div>
  </MainDashboard>
</LayoutDash>
