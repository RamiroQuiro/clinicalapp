---
import db from '@/db';
import {
  antecedente,
  archivosAdjuntos,
  atenciones,
  diagnostico,
  fichaPaciente,
  medicamento,
  pacientes,
} from '@/db/schema';
import { and, desc, eq, sql } from 'drizzle-orm';
import Button1 from '../../../../components/atomos/Button1.astro';
import Div1Atencion from '../../../../components/atomos/Div1Atencion.astro';
import DivBox1 from '../../../../components/atomos/DivBox1.astro';
import MainDashboard from '../../../../components/atomos/MainDashboard.astro';
import LayoutDash from '../../../../components/layouts/LayoutDash.astro';
import ContenedorCharts from '../../../../components/moleculas/ContenedorCharts.astro';
import Antecedentes from '../../../../components/organismo/Antecedentes.astro';
import ArchivosAdjuntosPaciente from '../../../../components/organismo/ArchivosAdjuntosPaciente.astro';
import HistorialVisitaPaciente from '../../../../components/organismo/HistorialVisitaPaciente.astro';
import MedicacionFichaPaciente from '../../../../components/organismo/MedicacionFichaPaciente.astro';
import NotasMedicas from '../../../../components/organismo/NotasMedicas.astro';
import PacienteHeader from '../../../../components/organismo/PacienteHeader.astro';
import { notasMedicas } from '../../../../db/schema/notasMedicas';

const { pacienteId } = Astro.params;
const { session } = Astro.locals;
const userId = session?.userId;

export async function getPacienteData(pacienteId: string, userId: string) {
  try {
    const result = await db.transaction(async trx => {
      // Consulta del paciente
      const pacienteData = (
        await trx
          .select({
            nombre: pacientes.nombre,
            apellido: pacientes.apellido,
            dni: pacientes.dni,
            sexo: pacientes.sexo,
            celular: fichaPaciente.celular,
            email: fichaPaciente.email,
            fNacimiento: pacientes.fNacimiento,
            obraSocial: fichaPaciente.obraSocial,
            nObraSocial: fichaPaciente.nObraSocial,
            ciudad: fichaPaciente.ciudad,
            provincia: fichaPaciente.provincia,
            grupoSanguineo: fichaPaciente.grupoSanguineo,
            estatura: fichaPaciente.estatura,
            domicilio: pacientes.domicilio,
          })
          .from(pacientes)
          .innerJoin(
            fichaPaciente,
            and(
              eq(fichaPaciente.pacienteId, pacienteId),
              eq(fichaPaciente.userId, userId) // Filtrar por el usuario (userId)
            )
          )
          .where(eq(pacientes.id, pacienteId))
      ).at(0);
      if (!pacienteData) {
        throw new Error('Paciente no encontrado');
      }

      // Medicamentos asociados
      const medicamentosData = await trx
        .select()
        .from(medicamento)
        .where(eq(medicamento.pacienteId, pacienteId))
        .orderBy(desc(medicamento.created_at));

      // Historial de visitas
      const historialVisitas = await trx
        .select({
          id: atenciones.id,
          fecha: atenciones.created_at,
          motivo: atenciones.motivoConsulta,
          diagnosticos: sql`GROUP_CONCAT(${diagnostico.diagnostico}, ', ')`.as('diagnosticos'),
          tratamiento: atenciones.tratamiento,
        })
        .from(atenciones)
        .rightJoin(diagnostico, eq(diagnostico.atencionId, atenciones.id))
        .where(eq(atenciones.pacienteId, pacienteId))
        .groupBy(atenciones.id)
        .orderBy(desc(atenciones.created_at));

      // voy a crear un mapa o objeto de colores segun el id de la atencion, los key del objeto seran el id, y se asignara el color de la paleta denro de la funcion generatColor
      const generateColor = index => {
        const colors = ['#A5CDFE38', '#DCECFF45', '#FCE3D54C', '#FFD2B2BD', '#E25B3250'];
        return colors[index % colors.length]; // Reutiliza colores si hay más atenciones que colores.
      };

      // Crear el mapa de colores
      const colorMap = historialVisitas.reduce((map, atencion, index) => {
        map[atencion.id] = generateColor(index);
        return map;
      }, {});

      // Antecedentes
      const arrayAntecedente = await trx
        .select()
        .from(antecedente)
        .where(eq(antecedente.pacienteId, pacienteId));

      // Archivos adjuntos
      const arrayArchivosAdjuntos = await trx
        .select()
        .from(archivosAdjuntos)
        .where(eq(archivosAdjuntos.pacienteId, pacienteId))
        .orderBy(desc(archivosAdjuntos.created_at));

      // Notas médicas
      const arrayNotasMedicas = await trx
        .select()
        .from(notasMedicas)
        .where(eq(notasMedicas.pacienteId, pacienteId))
        .orderBy(desc(notasMedicas.created_at));

      // Devuelve todos los resultados juntos
      return {
        pacienteData,
        medicamentosData,
        historialVisitas,
        arrayAntecedente,
        arrayArchivosAdjuntos,
        arrayNotasMedicas,
        colorMap,
      };
    });

    return result; // Transacción exitosa
  } catch (error) {
    console.error('Error en la transacción:', error);
    throw new Error('Ocurrió un error al procesar la solicitud');
  }
}

const {
  arrayAntecedente,
  arrayArchivosAdjuntos,
  arrayNotasMedicas,
  historialVisitas,
  medicamentosData,
  pacienteData,
  colorMap,
} = await getPacienteData(pacienteId, userId);
// console.log(pacienteData);
---

<LayoutDash>
  <MainDashboard h1="Ficha del paciente">
    <div class="container py-4 gap-2 px-2 flex flex-col w- w-[97%]">
      <PacienteHeader {...pacienteData} />
      <!-- <ContenedoresProgresoHistorial client:load/> -->
      <DivBox1 class="w-full text-primary-texto">
        <details class="w-full tex-center flex items-center justify-center">
          <summary
            class="px-2 py-0 bg-primary-bacSidebar shadow- shadow-primary-100 cursor-pointer w-full text-sm font-semibold text-center flex items-center justify-between"
            ><p>Pogresos</p><Button1>ver más</Button1></summary
          >
          <ContenedorCharts />
        </details>
      </DivBox1>
      <div class="flex w-full items-start justify-normal gap-4">
        <Div1Atencion>
          <DivBox1>
            <Antecedentes antecedentes={arrayAntecedente} />
          </DivBox1>
          <HistorialVisitaPaciente colorMap={colorMap} visitas={historialVisitas} />
        </Div1Atencion>
        <Div1Atencion>
          <MedicacionFichaPaciente colorMap={colorMap} medicacion={medicamentosData} />
          <ArchivosAdjuntosPaciente documentos={arrayArchivosAdjuntos} />
          <NotasMedicas userId={userId} notes={arrayNotasMedicas} />
        </Div1Atencion>
      </div>
    </div>
  </MainDashboard>
</LayoutDash>
