---
import Button1 from '../../../components/atomos/Button1.astro';
import FormCont from '../../../components/atomos/FormCont.astro';
import InputDate from '../../../components/atomos/InputDate';
import ContenedorBoton from '../../../components/moleculas/ContenedorBoton.astro';
import ContenedorInputForm from '../../../components/moleculas/ContenedorInputForm.astro';
import ContenedorInputSelected from '../../../components/moleculas/ContenedorInputSelected.astro';

const { user, paciente } = Astro.props;
const { session } = Astro.locals;
const { pacienteId } = Astro.params;
const userId = session?.userId;
---

<FormCont id="formularioCliente" title="Nuevo Paciente">
  <div
    id={session?.userId}
    data-user-id
    class="flex md:flex-row items-center gap-2 w-full justify-normal"
  >
    <!-- Campo DNI con evento input -->
    <ContenedorInputForm
      label="* dni"
      type="number"
      name="dni"
      id="dni"
      value={paciente?.dni}
      onInput="handleDNIInput(event)"
    />
    <!-- Campos principales deshabilitados inicialmente -->
    <ContenedorInputForm
      label="* nombre"
      type="text"
      name="nombre"
      id="nombre"
      styleInput=""
      value={paciente?.nombre}
      readOnly
    />
    <ContenedorInputForm
      label="* apellido"
      type="text"
      name="apellido"
      id="apellido"
      styleInput=""
      value={paciente?.apellido}
      readOnly
    />
  </div>

  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <!-- Campo de selección para el sexo -->
    <ContenedorInputSelected
      options={[
        { id: 1, value: 'masculino' },
        { id: 2, value: 'femenino' },
      ]}
      name="sexo"
      id="sexo"
      readOnly
      label="* genero"
      value={paciente?.sexo}
    />

    <ContenedorInputForm
      label="* email"
      type="email"
      name="email"
      id="email"
      value={paciente?.email}
    />
    <ContenedorInputForm
      label="celular"
      type="text"
      name="celular"
      id="celular"
      value={paciente?.celular}
    />
  </div>
  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <ContenedorInputForm
      label="domicilio"
      type="text"
      id="domicilio"
      readOnly
      name="domicilio"
      value={paciente?.domicilio}
    />
    <ContenedorInputForm
      label="ciudad"
      type="text"
      name="ciudad"
      id="ciudad"
      value={paciente?.ciudad}
    />
    <ContenedorInputForm
      label="provincia"
      type="text"
      name="provincia"
      id="provincia"
      value={paciente?.provincia}
    />
  </div>
  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <ContenedorInputForm
      label="obraSocial"
      type="text"
      name="obraSocial"
      id="obraSocial"
      value={paciente?.obraSocial}
    />
    <ContenedorInputForm
      label="N° Obra Social"
      type="text"
      name="nObraSocial"
      id="nObraSocial"
      value={paciente?.nObraSocial}
    />
  </div>
  <div class="text-xs text-left flex flex-col items-start gap-">
    <p>Fecha de Nacimiento</p>
    <InputDate
      label="Fecha de Nacimiento"
      name="fNacimiento"
      readOnly
      id="fNacimiento"
      client:load
      value={paciente?.fNacimiento}
    />
  </div>
  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <ContenedorInputForm
      label="estatura en centimetros"
      type="number"
      name="estatura"
      id="estatura"
      value={paciente?.estatura}
    />
    <ContenedorInputForm
      label="grupo Sanguineo"
      type="text"
      name="grupoSanguineo"
      id="grupoSanguineo"
      value={paciente?.grupoSanguineo}
    />
  </div>
  <ContenedorBoton>
    <Button1 type="submit">Agregar</Button1>
  </ContenedorBoton>
  <div class="h-6 text-center w-full">
    <span class="items-center text-sm text-primary-texto">* campos requeridos </span>
    <p id="errores" class="text-xs font-semibold tracking-wider text-primary-400"></p>
  </div>
</FormCont>

<script define:vars={{ pacienteId, userId }}>
  const formulario = document.getElementById('formularioCliente');
  const erroresShow = document.getElementById('errores');
  const dniInput = document.getElementById('dni');
  const nombreInput = document.getElementById('nombre');
  const apellidoInput = document.getElementById('apellido');
  const sexoInput = document.getElementById('sexo');
  const fNacimientoInput = document.getElementById('fNacimiento');
  const domicilioInput = document.getElementById('domicilio');
  const emailInput = document.getElementById('email');
  const celularInput = document.getElementById('celular');
  const ciudadInput = document.getElementById('ciudad');
  const provinciaInput = document.getElementById('provincia');
  const obraSocialInput = document.getElementById('obraSocial');
  const nObraSocialInput = document.getElementById('nObraSocial');
  const estaturaInput = document.getElementById('estatura');
  const grupoSanguineoInput = document.getElementById('grupoSanguineo');

  // mandar el formulario
  formulario.addEventListener('submit', async e => {
    e.preventDefault();

    const formData = new FormData(e.target);
    formData.append('userId', userId);
    const data = Object.fromEntries(formData.entries());
    console.log(data);
    // condicionar el formulario para actualizar o crear un paciente
    if (pacienteId) {
      formData.append('id', pacienteId);
      const data = Object.fromEntries(formData.entries());
      try {
        const response = await fetch('/api/pacientes/create', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });
        const result = await response.json(); // Leer respuesta JSON
        if (result.code == 400) {
          erroresShow.textContent = result.msg;
          return;
        } else if (result.code == 200) {
          erroresShow.textContent = 'Paciente actualizado exitosamente.';
          window.location.reload();
        } else {
          // Manejo explícito de errores por status
          erroresShow.textContent = result.message || 'Error al actualizar el paciente.';
        }
      } catch (error) {
        console.error('Error al enviar los datos:', error);
        erroresShow.textContent = 'Error de conexión al servidor.';
      }
    } else {
      // Validación del formulario
      const camposRequeridos = ['nombre', 'apellido', 'dni', 'domicilio'];
      const camposFaltantes = camposRequeridos.filter(campo => !data[campo]);

      if (camposFaltantes.length > 0) {
        erroresShow.textContent = 'Por favor, complete todos los campos requeridos.';
        return;
      }
      try {
        const response = await fetch('/api/pacientes/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        const result = await response.json(); // Leer respuesta JSON
        if (result.code == 400) {
          erroresShow.textContent = result.msg;
          return;
        } else if (result.code == 200) {
          erroresShow.textContent = 'Paciente creado exitosamente.';
          window.location.reload();
        } else if (result.code == 500) {
          erroresShow.textContent = 'Paciente creado para este profesional.';
        } else {
          // Manejo explícito de errores por status
          console.log(result);
          erroresShow.textContent = result.message || 'Error al crear el paciente.';
        }
      } catch (error) {
        console.error('Error al enviar los datos:', error);
        erroresShow.textContent = 'Error de conexión al servidor.';
      }
    }
  });
</script>
