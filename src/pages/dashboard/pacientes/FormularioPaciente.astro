---
import Button1 from '../../../components/atomos/Button1.astro';
import FormCont from '../../../components/atomos/FormCont.astro';
import InputDate from '../../../components/atomos/InputDate';
import ContenedorBoton from '../../../components/moleculas/ContenedorBoton.astro';
import ContenedorInputForm from '../../../components/moleculas/ContenedorInputForm.astro';
import ContenedorInputSelected from '../../../components/moleculas/ContenedorInputSelected.astro';

const { user, paciente } = Astro.props;
const { session } = Astro.locals;
const { pacienteId } = Astro.params;
const userId = session?.userId;
---

<FormCont id="formularioCliente" title="Nuevo Paciente">
  <div
    id={session?.userId}
    data-user-id
    class="flex md:flex-row items-center gap-2 w-full justify-normal"
  >
    <ContenedorInputForm
      label="* dni"
      type="number"
      name="dni"
      id="dni"
      value={paciente?.dni}
    />
    <!-- Campos principales deshabilitados inicialmente -->
    <ContenedorInputForm
      label="* nombre"
      type="text"
      name="nombre"
      id="nombre"
      styleInput=""
      value={paciente?.nombre}
      readOnly
    />
    <ContenedorInputForm
      label="* apellido"
      type="text"
      name="apellido"
      id="apellido"
      styleInput=""
      value={paciente?.apellido}
      readOnly
    />
  </div>

  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <!-- Campo de selección para el sexo -->
    <ContenedorInputSelected
      options={[
        { id: 1, value: 'masculino' },
        { id: 2, value: 'femenino' },
      ]}
      name="sexo"
      id="sexo"
      readOnly
      label="* genero"
      value={paciente?.sexo}
    />

    <ContenedorInputForm
      label="* email"
      type="email"
      name="email"
      id="email"
      value={paciente?.email}
    />
    <ContenedorInputForm
      label="celular"
      type="text"
      name="celular"
      id="celular"
      value={paciente?.celular}
    />
  </div>
  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <ContenedorInputForm
      label="domicilio"
      type="text"
      id="domicilio"
      readOnly
      name="domicilio"
      value={paciente?.domicilio}
    />
    <ContenedorInputForm
      label="ciudad"
      type="text"
      name="ciudad"
      id="ciudad"
      value={paciente?.ciudad}
    />
    <ContenedorInputForm
      label="provincia"
      type="text"
      name="provincia"
      id="provincia"
      value={paciente?.provincia}
    />
  </div>
  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <ContenedorInputForm
      label="obraSocial"
      type="text"
      name="obraSocial"
      id="obraSocial"
      value={paciente?.obraSocial}
    />
    <ContenedorInputForm
      label="N° Obra Social"
      type="text"
      name="nObraSocial"
      id="nObraSocial"
      value={paciente?.nObraSocial}
    />
  </div>
  <div class="text-xs text-left flex flex-col items-start gap-">
    <p>Fecha de Nacimiento</p>
    <InputDate
      label="Fecha de Nacimiento"
      name="fNacimiento"
      readOnly
      id="fNacimiento"
      client:load
      value={paciente?.fNacimiento}
    />
  </div>
  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <ContenedorInputForm
      label="estatura en centimetros"
      type="number"
      name="estatura"
      id="estatura"
      value={paciente?.estatura}
    />
    <ContenedorInputForm
      label="grupo Sanguineo"
      type="text"
      name="grupoSanguineo"
      id="grupoSanguineo"
      value={paciente?.grupoSanguineo}
    />
  </div>
  <ContenedorBoton>
    <Button1 type="submit">Agregar</Button1>
  </ContenedorBoton>
  <div class="h-6 text-center w-full">
    <span class="items-center text-sm text-primary-texto">* campos requeridos </span>
    <p id="errores" class="text-xs font-semibold tracking-wider text-primary-400"></p>
  </div>
</FormCont>

<script define:vars={{ pacienteId, userId }}>
  const formulario = document.getElementById('formularioCliente');
  const erroresShow = document.getElementById('errores');
  const submitButton = formulario.querySelector('button[type="submit"]');

  formulario.addEventListener('submit', async e => {
    e.preventDefault();
    if (submitButton.disabled) return; // Prevenir doble submit

    // Deshabilitar botón y mostrar estado de carga
    submitButton.disabled = true;
    submitButton.textContent = 'Guardando...';
    erroresShow.textContent = '';

    const formData = new FormData(e.target);
    formData.append('userId', userId);
    const data = Object.fromEntries(formData.entries());

    const isUpdating = !!pacienteId;
    const url = '/api/pacientes/create';
    const method = isUpdating ? 'PUT' : 'POST';

    if (isUpdating) {
      data.id = pacienteId;
    }

    try {
      const response = await fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        // Si la respuesta no es 2xx, mostrar el error de la API
        erroresShow.textContent = result.msg || result.message || 'Ocurrió un error inesperado.';
      } else {
        // Éxito
        const successMessage = isUpdating
          ? 'Paciente actualizado exitosamente.'
          : 'Paciente creado exitosamente.';
        erroresShow.textContent = successMessage;

        // Redirigir al perfil del paciente (nuevo o actualizado)
        const newPatientId = result.paciente?.id || pacienteId;
        if (newPatientId) {
          window.location.href = `/dashboard/pacientes/${newPatientId}`;
        } else {
          window.location.reload(); // Fallback por si no viene el ID
        }
      }
    } catch (error) {
      console.error('Error al enviar los datos:', error);
      erroresShow.textContent = 'Error de conexión al servidor.';
    } finally {
      // Volver a habilitar el botón en cualquier caso (éxito o error)
      submitButton.disabled = false;
      submitButton.textContent = 'Agregar';
    }
  });
</script>
