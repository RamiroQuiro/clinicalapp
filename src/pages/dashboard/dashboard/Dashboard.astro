---
import { and, asc, count, desc, eq, gte, lte, sql } from 'drizzle-orm';
import { Activity, Clock, Users } from 'lucide-react';
import ContenedorTitleBotonera from '../../../components/atomos/ContenedorTitleBotonera.astro';
import DivBox1 from '../../../components/atomos/DivBox1.astro';
import H2 from '../../../components/atomos/H2.astro';
import db from '../../../db';
import { atenciones, pacientes } from '../../../db/schema';
import GraficoMotivosIniciales from './componente/GraficoMotivosIniciales.astro';
import GraficoUltimasAtenciones from './componente/GraficoUltimasAtenciones.astro';
import Header from './componente/Header.astro';
import ListaDeEspera from './componente/ListaDeEspera.astro';
import PacienteList from './componente/PacienteList.astro';
import StatsAtencionesDelDia from './componente/StatsAtencionesDelDia.astro';
import StatsCard from './componente/StatsCard.astro';

// const insertData=await db.insert(users).values({
//   id:'sakflsdk',
//   nombre:'Name',
//   apellido:'Man',
//   email:'a@a.com',
//   password:'asdfsadf'
// })
// condicionar con usuarioID
const { user, session } = Astro.locals;
const dataDB = async userId => {
  try {
    const result = await db.transaction(async trx => {
      // Obtener pacientes del usuario
      const pacientesData = await trx
        .select({
          id: pacientes.id,
          nombre: pacientes.nombre,
          apellido: pacientes.apellido,
          dni: pacientes.dni,
        })
        .from(pacientes)
        .where(eq(pacientes.userId, userId));

      // Fecha actual y rango de los últimos 7 días
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const sieteDiasAtras = new Date(today);
      sieteDiasAtras.setDate(today.getDate() - 6); // 6 días para incluir el día actual

      const startOfDay = sieteDiasAtras;
      startOfDay.setHours(0, 0, 0, 0);

      const endOfToday = new Date(today);
      endOfToday.setHours(23, 59, 59, 999);

      const atencionesPorDia = await trx
        .select({
          fecha: sql`DATE(datetime(${atenciones.created_at}, 'localtime'))`.as('fecha'),
          turno: sql`CASE
            WHEN strftime('%H', datetime(${atenciones.created_at}, 'localtime')) < '12' THEN 'mañana'
            ELSE 'tarde'
          END`.as('turno'),
          total: count().as('total'),
        })
        .from(atenciones)
        .where(
          and(
            eq(atenciones.userId, userId),
            gte(atenciones.created_at, startOfDay.toISOString()),
            lte(atenciones.created_at, endOfToday.toISOString())
          )
        )
        .groupBy(sql`DATE(datetime(${atenciones.created_at}, 'localtime')), turno`)
        .orderBy(asc(sql`DATE(datetime(${atenciones.created_at}, 'localtime'))`));

      // console.log('Atenciones por día:', JSON.stringify(atencionesPorDia, null, 2));

      const datosMotivoConsulta = await trx
        .select({
          motivoInicial: atenciones.motivoInicial,
          total: count(),
        })
        .from(atenciones)
        .where(eq(atenciones.userId, userId))
        .groupBy(atenciones.motivoInicial);

      // Fecha actual y primer día del mes
      const primerDiaMes = new Date(now.getFullYear(), now.getMonth(), 1);
      primerDiaMes.setHours(0, 0, 0, 0);
      const ultimoDiaMes = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      ultimoDiaMes.setHours(23, 59, 59, 999);
      // Obtener atenciones del mes actual
      const atencionesMes = await trx
        .select({
          id: atenciones.id,
          created_at: atenciones.created_at,
        })
        .from(atenciones)
        .where(
          and(
            eq(atenciones.userId, userId),
            gte(atenciones.created_at, primerDiaMes.toISOString()),
            lte(atenciones.created_at, ultimoDiaMes.toISOString())
          )
        );
      // Obtener tiempo promedio de consultas del día
      const atencionesDuracion = await trx
        .select({
          duracion:
            sql`avg((julianday(${atenciones.finAtencion}) - julianday(${atenciones.inicioAtencion})) * 24 * 60)`.as(
              'duracionPromedio'
            ), // Convertir a minutos
        })
        .from(atenciones)
        .where(
          and(
            eq(atenciones.userId, userId),
            sql`DATE(${atenciones.created_at}) = DATE('now')`,
            sql`${atenciones.finAtencion} IS NOT NULL`,
            sql`${atenciones.inicioAtencion} IS NOT NULL`
          )
        );

      // Obtener las últimas 6 atenciones
      const ultimasAtenciones = await trx
        .select({
          id: atenciones.id,
          finAtencion: atenciones.finAtencion,
          inicioAtencion: atenciones.inicioAtencion,
          pacienteId: atenciones.pacienteId,
          nombre: pacientes.nombre,
          apellido: pacientes.apellido,
          obraSocial: pacientes.obraSocial,
          dni: pacientes.dni,
        })
        .from(atenciones)
        .innerJoin(pacientes, eq(pacientes.id, atenciones.pacienteId))
        .where(eq(atenciones.userId, userId))
        .orderBy(desc(atenciones.created_at))
        .limit(6);

      return {
        pacientesData,
        atencionesPorDia,
        atencionesMes,
        datosMotivoConsulta,
        duracionPromedio: Math.round(atencionesDuracion[0]?.duracion || 0),
        ultimasAtenciones,
      };
    });

    return result;
  } catch (error) {
    console.error('Error en la transacción:', error);
    throw new Error('Ocurrió un error al procesar la solicitud');
  }
};

const {
  pacientesData,
  atencionesPorDia,
  atencionesMes,
  datosMotivoConsulta,
  duracionPromedio,
  ultimasAtenciones,
} = await dataDB(session?.userId);

const stats = [
  {
    title: 'Pacientes Totales',
    value: pacientesData.length,
    icon: Users,
  },
  {
    title: 'Atenciones del Mes',
    value: atencionesMes.length,
    icon: Activity,
    subtitle: 'este mes',
  },
  {
    title: 'Tiempo Promedio',
    value: duracionPromedio,
    icon: Clock,
    subtitle: 'minutos por consulta',
  },
];

const atencionesDelDia = atencionesPorDia.filter(atencion => {
  const today = new Date();
  const utcToday = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate())); //si o si converitr en 0,0,0,0 el horario
  const atencionFecha = new Date(atencion.fecha);
  return atencionFecha.toISOString() === utcToday.toISOString();
});

const atencionTurnoTarde =
  atencionesDelDia?.filter(turno => turno.turno === 'tarde')[0]?.total || 0;
const atencionTurnoManana =
  atencionesDelDia?.filter(turno => turno.turno === 'mañana')[0]?.total || 0;
---

<div class="container py-4 gap-2 px-2 flex flex-col w- w-[97%]">
  <Header arrayPacientes={pacientesData} isClickend={true} />

  <div class="flex items-center gap-2 justify-evenly">
    <StatsAtencionesDelDia
      atencionTurnoManana={atencionTurnoManana}
      atencionTurnoTarde={atencionTurnoTarde}
    />
    {
      stats.map((stat, index) => {
        let Icon = stat.icon;
        return (
          <StatsCard
            key={index}
            title={stat.title}
            value={stat}
            icon={Icon}
            color={stat.color}
            trend={stat.trend}
          />
        );
      })
    }
  </div>

  <div class="flex items-start justify-between gap-2 w-full">
    <!-- ultimas atenciones -->
    <DivBox1 styleDiv="w-[30%]">
      <ContenedorTitleBotonera>
        <H2>Ultimas Atenciones</H2>
        <!-- <div>
          <Button1>ver más</Button1>
        </div> -->
      </ContenedorTitleBotonera>
      <PacienteList ultimasAtenciones={ultimasAtenciones} />
    </DivBox1>
    <!-- proximas atencxiones -->
    <ListaDeEspera />
    <!-- graficos -->
    <div class="flex flex-col gap-3 w-[40%] items-stretch justify-normal">
      <DivBox1 styleDiv="w12">
        <GraficoUltimasAtenciones data={atencionesPorDia} />
      </DivBox1>
      <DivBox1 tyleDiv="w1/2">
        <GraficoMotivosIniciales data={datosMotivoConsulta} />
      </DivBox1>
    </div>
  </div>
  <!-- botones de acciones -->
  <!-- <div class="mt-8">
    <QuickActions />
  </div> -->
</div>
