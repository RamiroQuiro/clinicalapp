---
import Header from "./componente/Header.astro";
import StatsCard from "./componente/StatsCard.astro";
import PacienteList from "./componente/PacienteList.astro";
import QuickActions from "./componente/QuickAction.astro";
import {
  Activity,
  AlertTriangle,
  Calendar,
  Clock,
  FileText,
  Users,
} from "lucide-react";
import db from "../../../db";
import { atenciones, pacientes, users } from "../../../db/schema";
import {
  desc,
  eq,
  between,
  sql,
  and,
  gt,
  lte,
  count,
  asc,
  gte,
} from "drizzle-orm";
import DivBox1 from "../../../components/atomos/DivBox1.astro";
import ContenedorTitleBotonera from "../../../components/atomos/ContenedorTitleBotonera.astro";
import H2 from "../../../components/atomos/H2.astro";
import GraficoUltimasAtenciones from "./componente/GraficoUltimasAtenciones.astro";
import SalaEspera from "./componente/SalaEspera";
import GraficoMotivosIniciales from "./componente/GraficoMotivosIniciales.astro";
import ListaDeEspera from "./componente/ListaDeEspera.astro";

// const insertData=await db.insert(users).values({
//   id:'sakflsdk',
//   nombre:'Name',
//   apellido:'Man',
//   email:'a@a.com',
//   password:'asdfsadf'
// })
// condicionar con usuarioID

const dataDB = async (userId) => {
  try {
    const result = await db.transaction(async (trx) => {
      // Obtener pacientes del usuario
      const pacientesData = await trx
        .select({
          id: pacientes.id,
          nombre: pacientes.nombre,
          apellido: pacientes.apellido,
          dni: pacientes.dni,
        })
        .from(pacientes)
        .where(eq(pacientes.userId, userId));

      // Fecha actual y rango de los últimos 7 días
      const today = new Date();
      const sieteDiasAtras = new Date(today.setDate(today.getDate() - 7));
      const startOfDay = sieteDiasAtras.setHours(0, 0, 0, 0);
      const endOfToday = new Date().setHours(23, 59, 59, 999);
      // Obtener cantidad de atenciones turno mañana
      // Obtener datos agrupados por fecha y turno
      const atencionesPorDia = await trx
        .select({
          fecha: sql`DATE(${atenciones.created_at})`.as("fecha"),
          turno: sql`CASE
            WHEN strftime('%H', ${atenciones.created_at}) < '12' THEN 'mañana'
            ELSE 'tarde'
          END`.as("turno"),
          total: count().as("total"),
        })
        .from(atenciones)
        .where(
          and(
            eq(atenciones.userId, userId),
            gte(atenciones.created_at, new Date(startOfDay).toISOString()),
            lte(atenciones.created_at, new Date(endOfToday).toISOString()),
          ),
        )
        .groupBy(sql`DATE(${atenciones.created_at}), turno`)
        .orderBy(asc(sql`DATE(${atenciones.created_at})`));

      const datosMotivoConsulta = await trx
        .select({
          motivoInicial: atenciones.motivoInicial,
          total: count(),
        })
        .from(atenciones)
        .where(eq(atenciones.userId, userId))
        .groupBy(atenciones.motivoInicial);

      // Obtener las últimas 6 atenciones
      const ultimasAtenciones = await trx
        .select({
          id: atenciones.id,
          finAtencion: atenciones.finAtencion,
          inicioAtencion: atenciones.inicioAtencion,
          pacienteId: atenciones.pacienteId,
          nombre: pacientes.nombre,
          apellido: pacientes.apellido,
          obraSocial: pacientes.obraSocial,
          dni: pacientes.dni,
        })
        .from(atenciones)
        .innerJoin(pacientes, eq(pacientes.id, atenciones.pacienteId))
        .where(eq(atenciones.userId, userId))
        .orderBy(desc(atenciones.created_at))
        .limit(6);

      return {
        pacientesData,
        datosMotivoConsulta,
        atencionesPorDia,
        ultimasAtenciones,
      };
    });

    return result;
  } catch (error) {
    console.error("Error en la transacción:", error);
    throw new Error("Ocurrió un error al procesar la solicitud");
  }
};

const {
  pacientesData,
  atencionesPorDia,
  ultimasAtenciones,
  datosMotivoConsulta,
} = await dataDB("sakflsdk");

const stats = [
  {
    title: "Pacientes Totales",
    value: pacientesData.length,
    icon: Users,
  },

  {
    title: "Historias Actualizadas",
    value: "89%",
    icon: FileText,
    change: "+3.2%",
  },
];
const today = new Date();
const utcToday = new Date(
  Date.UTC(today.getFullYear(), today.getMonth(), today.getDate()),
); //si o si converitr en 0,0,0,0 el horario

const atencionesDelDia = atencionesPorDia.filter((atencion) => {
  const atencionFecha = new Date(atencion.fecha);
  return atencionFecha.toISOString() === utcToday.toISOString();
});

const dataGraficos = { atencionesPorDia, datosMotivoConsulta };
const atencionTurnoTarde = atencionesDelDia?.filter(
  (turno) => turno.turno == "tarde",
)[0]?.total;
const atencionTurnoManana = atencionesDelDia?.filter(
  (turno) => turno.turno == "mañana",
)[0]?.total;
---

<div class="container py-4 gap-2 px-2 flex flex-col w- w-[97%]">
  <Header arrayPacientes={pacientesData} />

  <div class="flex items-center gap-2 justify-evenly">
    <DivBox1 class="p-6">
      <div class="flex w-full items-start justify-between">
        <div class="flex flex-col items-start justify-normal w-full">
          <p class="text-sm font-medium text-gray-600">
            Consultas Hoy <span class="text-2xl ml-3 text-primary-texto"
              >{
                atencionesDelDia?.reduce((acc, turno) => {
                  acc = ++turno.total;
                  return acc;
                }, 0)
              }</span>
          </p>
          <div class="flex w-full items-center justify-between pr-4">
            <div>
              <p class="text-sm font-medium text-gray-600">Mañana</p>
              <h3 class="mt-1 text-xl font-semibold">{atencionTurnoManana}</h3>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-600">Tarde</p>
              <h3 class="mt-1 text-xl font-semibold">{atencionTurnoTarde}</h3>
            </div>
          </div>
        </div>
      </div>
      <div class="mt-4"></div>
    </DivBox1>
    {
      stats.map((stat, index) => {
        let Icon = stat.icon;
        return (
          <DivBox1 key={index} class="p-6">
            <div class="flex w-full items-center justify-between">
              <div>
                <p class="text-sm font-medium text-gray-600">{stat.title}</p>
                <h3 class="mt-1 text-2xl font-semibold">{stat.value}</h3>
              </div>
              <div class={`rounded-full bg-primary-150 p-2`}>
                <Icon className="w-5" />
              </div>
            </div>
            <div class="mt-4" />
          </DivBox1>
        );
      })
    }
  </div>

  <div class="flex items-start justify-between gap-2 w-full">
    <!-- ultimas atenciones -->
    <DivBox1 styleDiv="w-[30%]">
      <ContenedorTitleBotonera>
        <H2>Ultimas Atenciones</H2>
        <!-- <div>
          <Button1>ver más</Button1>
        </div> -->
      </ContenedorTitleBotonera>
      <PacienteList ultimasAtenciones={ultimasAtenciones} />
    </DivBox1>
    <!-- proximas atencxiones -->
    <ListaDeEspera />
    <!-- graficos -->
    <div class="flex flex-col gap-3 w-[40%] items-stretch justify-normal">
      <DivBox1 styleDiv="w12">
        <GraficoUltimasAtenciones data={atencionesPorDia} />
      </DivBox1>
      <DivBox1 tyleDiv="w1/2">
        <GraficoMotivosIniciales data={datosMotivoConsulta} />
      </DivBox1>
    </div>
  </div>
  <!-- botones de acciones -->
  <!-- <div class="mt-8">
    <QuickActions />
  </div> -->
</div>
